{"version":3,"sources":["secret-field-watcher.js"],"names":["SecretFieldWatcher","parameters","evt","console","log","options","name","value","currentValue","target","background","document","querySelector","style","backgroundColor","errorMessage","errorMessageSpan","innerHTML","parametersWithDefaults","Object","assign","foregroundColor","field","addEventListener","lookForFieldValue","parentElement","warn"],"mappings":";;;;;;IAAMA,kB,GACJ;AAIA;AACA;AACA;AACA,4BAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AAAA,mCANd,EAMc;;AAAA,4CALL,IAKK;;AAAA,6CAqCJ,UAACC,GAAD,EAAS;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAI,CAACC,OAAL,CAAaC,IAArC,EAA2C,KAAI,CAACD,OAAL,CAAaE,KAAxD;AACA,QAAMC,YAAY,GAAGN,GAAG,CAACO,MAAJ,CAAWF,KAAhC;AACA,QAAIG,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAjB;;AACA,QAAIJ,YAAY,KAAK,KAAI,CAACH,OAAL,CAAaE,KAAlC,EAAyC;AACvCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEAM,MAAAA,UAAU,CAACG,KAAX,CAAiBC,eAAjB,GAAmC,KAAI,CAACT,OAAL,CAAaS,eAAhD;;AAEA,UAAI,KAAI,CAACT,OAAL,CAAaU,YAAjB,EAA+B;AAC7B,QAAA,KAAI,CAACV,OAAL,CAAaW,gBAAb,CAA8BC,SAA9B,GAA0C,KAAI,CAACZ,OAAL,CAAaU,YAAvD;AACD,OAPsC,CASvC;AACA;AACA;;AACD,KAZD,MAYO;AACLZ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BI,YAA7B;AACAE,MAAAA,UAAU,CAACG,KAAX,CAAiBC,eAAjB,GAAmC,EAAnC;AACD;AACF,GAzDuB;;AACtB,MAAMI,sBAAsB,GAAGC,MAAM,CAACC,MAAP,CAC7B,EAD6B,EAE7B;AACEd,IAAAA,IAAI,EAAE,GADR;AAEEC,IAAAA,KAAK,EAAE,GAFT;AAGEO,IAAAA,eAAe,EAAE,MAHnB;AAIEO,IAAAA,eAAe,EAAE,OAJnB;AAKEN,IAAAA,YAAY,EAAE;AALhB,GAF6B,EAS7Bd,UAT6B,CAA/B;AAYA,MAAMK,IAAI,GAAGY,sBAAsB,CAACZ,IAApC,CAbsB,CActB;AACA;AACA;;AACA,OAAKD,OAAL,GAAea,sBAAf;AAEAf,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCc,sBAAzC,EAAiEZ,IAAjE;;AAEA,MAAIA,IAAJ,EAAU;AACR;AACA;AACA;AACA,QAAMgB,KAAK,GAAGX,QAAQ,CAACC,aAAT,wBAAsCN,IAAtC,SAAd;;AACA,QAAIgB,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACC,gBAAN,CAAuB,OAAvB,EAAgC,KAAKC,iBAArC;AACA,WAAKnB,OAAL,CAAaW,gBAAb,GAAgCM,KAAK,CAACG,aAAN,CAAoBb,aAApB,CAC9B,gBAD8B,CAAhC;AAGD,KALD,MAKO;AACLT,MAAAA,OAAO,CAACuB,IAAR,CAAa,mDAAb,EAAkEpB,IAAlE;AACD;AACF;AACF,C","sourcesContent":["class SecretFieldWatcher {\n  // setup a class variable to hold all of our configured parameters\n  options = {};\n  errorMessageSpan = null;\n\n  // parameters will be an object literal {} containing the key-value pairs we need\n  // known parameters: name, value, backgroundColor, errorMessage\n  // parameters = {name: 'some name', value = 'some value' backgroundColor: 'some color', errorMessage: 'uh oh'}\n  constructor(parameters) {\n    const parametersWithDefaults = Object.assign(\n      {},\n      {\n        name: \" \",\n        value: \" \",\n        backgroundColor: \"blue\",\n        foregroundColor: \"white\",\n        errorMessage: \" \",\n      },\n      parameters\n    );\n\n    const name = parametersWithDefaults.name;\n    // if (parametersWithDefaults.errorMessage) {\n    //   parametersWithDefaults.backgroundColor = \"red\";\n    // }\n    this.options = parametersWithDefaults;\n\n    console.log(\"SecretFieldWatcher ready!\", parametersWithDefaults, name);\n\n    if (name) {\n      // the old way\n      // const field = document.querySelector('input[type='' + name + ']')\n      // the cool ES6 way:\n      const field = document.querySelector(`input[name=\"${name}\"]`);\n      if (field) {\n        field.addEventListener(\"keyup\", this.lookForFieldValue);\n        this.options.errorMessageSpan = field.parentElement.querySelector(\n          \".error-message\"\n        );\n      } else {\n        console.warn(\"you fucked up.. we couldn't find the field named \", name);\n      }\n    }\n  }\n\n  lookForFieldValue = (evt) => {\n    console.log(\"looking!\", this.options.name, this.options.value);\n    const currentValue = evt.target.value;\n    let background = document.querySelector(\".background\");\n    if (currentValue === this.options.value) {\n      console.log(\"matched!\");\n\n      background.style.backgroundColor = this.options.backgroundColor;\n\n      if (this.options.errorMessage) {\n        this.options.errorMessageSpan.innerHTML = this.options.errorMessage;\n      }\n\n      // 1. set the background color of the form area (white part) to the selected bg color\n      // 2. if there's an errorMessage show that in the span.error-message for this field\n      // 3. on the next change of the field, reset the background color and empty the error field\n    } else {\n      console.log(\"did not match\", currentValue);\n      background.style.backgroundColor = \"\";\n    }\n  };\n}\n"],"file":"secret-field-watcher.js"}